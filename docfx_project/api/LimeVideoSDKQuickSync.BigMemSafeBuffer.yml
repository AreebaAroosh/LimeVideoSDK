### YamlMime:ManagedReference
items:
- uid: LimeVideoSDKQuickSync.BigMemSafeBuffer
  commentId: T:LimeVideoSDKQuickSync.BigMemSafeBuffer
  id: BigMemSafeBuffer
  parent: LimeVideoSDKQuickSync
  children:
  - LimeVideoSDKQuickSync.BigMemSafeBuffer.#ctor(System.Int64)
  - LimeVideoSDKQuickSync.BigMemSafeBuffer.ReleaseHandle
  langs:
  - csharp
  - vb
  name: BigMemSafeBuffer
  nameWithType: BigMemSafeBuffer
  fullName: LimeVideoSDKQuickSync.BigMemSafeBuffer
  type: Class
  source:
    remote:
      path: dotnet/Class Libraries/LimeVideoSDKQuickSync/BigMemSafeBuffer.cs
      branch: master
      repo: https://github.com/cameron-elliott/LimeVideoSDK.git
    id: BigMemSafeBuffer
    path: ../dotnet/Class Libraries/LimeVideoSDKQuickSync/BigMemSafeBuffer.cs
    startLine: 18
  assemblies:
  - LimeVideoSDKQuickSync
  namespace: LimeVideoSDKQuickSync
  summary: "\nThis is a helper class to enable <xref href=\"System.IO.UnmanagedMemoryStream\" data-throw-if-not-resolved=\"false\"></xref>  to read from \nfiles larger than 2GB\n"
  example: []
  syntax:
    content: 'public class BigMemSafeBuffer : SafeBuffer, IDisposable'
    content.vb: >-
      Public Class BigMemSafeBuffer
          Inherits SafeBuffer
          Implements IDisposable
  inheritance:
  - System.Object
  - System.Runtime.ConstrainedExecution.CriticalFinalizerObject
  - System.Runtime.InteropServices.SafeHandle
  - Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid
  - System.Runtime.InteropServices.SafeBuffer
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt64)
  - System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt32,System.UInt32)
  - System.Runtime.InteropServices.SafeBuffer.Initialize``1(System.UInt32)
  - System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*@)
  - System.Runtime.InteropServices.SafeBuffer.ReleasePointer
  - System.Runtime.InteropServices.SafeBuffer.Read``1(System.UInt64)
  - System.Runtime.InteropServices.SafeBuffer.ReadArray``1(System.UInt64,{T}[],System.Int32,System.Int32)
  - System.Runtime.InteropServices.SafeBuffer.Write``1(System.UInt64,{T})
  - System.Runtime.InteropServices.SafeBuffer.WriteArray``1(System.UInt64,{T}[],System.Int32,System.Int32)
  - System.Runtime.InteropServices.SafeBuffer.ByteLength
  - Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid.IsInvalid
  - System.Runtime.InteropServices.SafeHandle.handle
  - System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)
  - System.Runtime.InteropServices.SafeHandle.DangerousGetHandle
  - System.Runtime.InteropServices.SafeHandle.Close
  - System.Runtime.InteropServices.SafeHandle.Dispose
  - System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)
  - System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid
  - System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)
  - System.Runtime.InteropServices.SafeHandle.DangerousRelease
  - System.Runtime.InteropServices.SafeHandle.IsClosed
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: LimeVideoSDKQuickSync.BigMemSafeBuffer.#ctor(System.Int64)
  commentId: M:LimeVideoSDKQuickSync.BigMemSafeBuffer.#ctor(System.Int64)
  id: '#ctor(System.Int64)'
  parent: LimeVideoSDKQuickSync.BigMemSafeBuffer
  langs:
  - csharp
  - vb
  name: BigMemSafeBuffer(Int64)
  nameWithType: BigMemSafeBuffer.BigMemSafeBuffer(Int64)
  fullName: LimeVideoSDKQuickSync.BigMemSafeBuffer.BigMemSafeBuffer(System.Int64)
  type: Constructor
  source:
    remote:
      path: dotnet/Class Libraries/LimeVideoSDKQuickSync/BigMemSafeBuffer.cs
      branch: master
      repo: https://github.com/cameron-elliott/LimeVideoSDK.git
    id: .ctor
    path: ../dotnet/Class Libraries/LimeVideoSDKQuickSync/BigMemSafeBuffer.cs
    startLine: 22
  assemblies:
  - LimeVideoSDKQuickSync
  namespace: LimeVideoSDKQuickSync
  summary: ''
  example: []
  syntax:
    content: public BigMemSafeBuffer(long length)
    content.vb: Public Sub New(length As Long)
    parameters:
    - id: length
      type: System.Int64
      description: Number of bytes to allocate.
  overload: LimeVideoSDKQuickSync.BigMemSafeBuffer.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: LimeVideoSDKQuickSync.BigMemSafeBuffer.ReleaseHandle
  commentId: M:LimeVideoSDKQuickSync.BigMemSafeBuffer.ReleaseHandle
  id: ReleaseHandle
  parent: LimeVideoSDKQuickSync.BigMemSafeBuffer
  langs:
  - csharp
  - vb
  name: ReleaseHandle()
  nameWithType: BigMemSafeBuffer.ReleaseHandle()
  fullName: LimeVideoSDKQuickSync.BigMemSafeBuffer.ReleaseHandle()
  type: Method
  source:
    remote:
      path: dotnet/Class Libraries/LimeVideoSDKQuickSync/BigMemSafeBuffer.cs
      branch: master
      repo: https://github.com/cameron-elliott/LimeVideoSDK.git
    id: ReleaseHandle
    path: ../dotnet/Class Libraries/LimeVideoSDKQuickSync/BigMemSafeBuffer.cs
    startLine: 34
  assemblies:
  - LimeVideoSDKQuickSync
  namespace: LimeVideoSDKQuickSync
  summary: "\nNecessary for SafeBuffer\n"
  example: []
  syntax:
    content: protected override bool ReleaseHandle()
    content.vb: Protected Overrides Function ReleaseHandle As Boolean
    return:
      type: System.Boolean
      description: ''
  overridden: System.Runtime.InteropServices.SafeHandle.ReleaseHandle
  overload: LimeVideoSDKQuickSync.BigMemSafeBuffer.ReleaseHandle*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
references:
- uid: System.IO.UnmanagedMemoryStream
  commentId: T:System.IO.UnmanagedMemoryStream
  parent: System.IO
  isExternal: true
  name: UnmanagedMemoryStream
  nameWithType: UnmanagedMemoryStream
  fullName: System.IO.UnmanagedMemoryStream
- uid: LimeVideoSDKQuickSync
  commentId: N:LimeVideoSDKQuickSync
  isExternal: false
  name: LimeVideoSDKQuickSync
  nameWithType: LimeVideoSDKQuickSync
  fullName: LimeVideoSDKQuickSync
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Runtime.ConstrainedExecution.CriticalFinalizerObject
  commentId: T:System.Runtime.ConstrainedExecution.CriticalFinalizerObject
  parent: System.Runtime.ConstrainedExecution
  isExternal: true
  name: CriticalFinalizerObject
  nameWithType: CriticalFinalizerObject
  fullName: System.Runtime.ConstrainedExecution.CriticalFinalizerObject
- uid: System.Runtime.InteropServices.SafeHandle
  commentId: T:System.Runtime.InteropServices.SafeHandle
  parent: System.Runtime.InteropServices
  isExternal: true
  name: SafeHandle
  nameWithType: SafeHandle
  fullName: System.Runtime.InteropServices.SafeHandle
- uid: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid
  commentId: T:Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid
  parent: Microsoft.Win32.SafeHandles
  isExternal: true
  name: SafeHandleZeroOrMinusOneIsInvalid
  nameWithType: SafeHandleZeroOrMinusOneIsInvalid
  fullName: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid
- uid: System.Runtime.InteropServices.SafeBuffer
  commentId: T:System.Runtime.InteropServices.SafeBuffer
  parent: System.Runtime.InteropServices
  isExternal: true
  name: SafeBuffer
  nameWithType: SafeBuffer
  fullName: System.Runtime.InteropServices.SafeBuffer
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt64)
  commentId: M:System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt64)
  parent: System.Runtime.InteropServices.SafeBuffer
  isExternal: true
  name: Initialize(UInt64)
  nameWithType: SafeBuffer.Initialize(UInt64)
  fullName: System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt64)
  spec.csharp:
  - uid: System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt64)
    name: Initialize
    nameWithType: SafeBuffer.Initialize
    fullName: System.Runtime.InteropServices.SafeBuffer.Initialize
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt64)
    name: Initialize
    nameWithType: SafeBuffer.Initialize
    fullName: System.Runtime.InteropServices.SafeBuffer.Initialize
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt32,System.UInt32)
  commentId: M:System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt32,System.UInt32)
  parent: System.Runtime.InteropServices.SafeBuffer
  isExternal: true
  name: Initialize(UInt32, UInt32)
  nameWithType: SafeBuffer.Initialize(UInt32, UInt32)
  fullName: System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt32, System.UInt32)
  spec.csharp:
  - uid: System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt32,System.UInt32)
    name: Initialize
    nameWithType: SafeBuffer.Initialize
    fullName: System.Runtime.InteropServices.SafeBuffer.Initialize
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt32,System.UInt32)
    name: Initialize
    nameWithType: SafeBuffer.Initialize
    fullName: System.Runtime.InteropServices.SafeBuffer.Initialize
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Runtime.InteropServices.SafeBuffer.Initialize``1(System.UInt32)
  commentId: M:System.Runtime.InteropServices.SafeBuffer.Initialize``1(System.UInt32)
  parent: System.Runtime.InteropServices.SafeBuffer
  isExternal: true
  name: Initialize<T>(UInt32)
  nameWithType: SafeBuffer.Initialize<T>(UInt32)
  fullName: System.Runtime.InteropServices.SafeBuffer.Initialize<T>(System.UInt32)
  nameWithType.vb: SafeBuffer.Initialize(Of T)(UInt32)
  fullname.vb: System.Runtime.InteropServices.SafeBuffer.Initialize(Of T)(System.UInt32)
  name.vb: Initialize(Of T)(UInt32)
  spec.csharp:
  - uid: System.Runtime.InteropServices.SafeBuffer.Initialize``1(System.UInt32)
    name: Initialize<T>
    nameWithType: SafeBuffer.Initialize<T>
    fullName: System.Runtime.InteropServices.SafeBuffer.Initialize<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.InteropServices.SafeBuffer.Initialize``1(System.UInt32)
    name: Initialize(Of T)
    nameWithType: SafeBuffer.Initialize(Of T)
    fullName: System.Runtime.InteropServices.SafeBuffer.Initialize(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*@)
  commentId: M:System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*@)
  parent: System.Runtime.InteropServices.SafeBuffer
  isExternal: true
  name: AcquirePointer(Byte*)
  nameWithType: SafeBuffer.AcquirePointer(Byte*)
  fullName: System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*)
  spec.csharp:
  - uid: System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*@)
    name: AcquirePointer
    nameWithType: SafeBuffer.AcquirePointer
    fullName: System.Runtime.InteropServices.SafeBuffer.AcquirePointer
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '*'
    nameWithType: '*'
    fullName: '*'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*@)
    name: AcquirePointer
    nameWithType: SafeBuffer.AcquirePointer
    fullName: System.Runtime.InteropServices.SafeBuffer.AcquirePointer
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '*'
    nameWithType: '*'
    fullName: '*'
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Runtime.InteropServices.SafeBuffer.ReleasePointer
  commentId: M:System.Runtime.InteropServices.SafeBuffer.ReleasePointer
  parent: System.Runtime.InteropServices.SafeBuffer
  isExternal: true
  name: ReleasePointer()
  nameWithType: SafeBuffer.ReleasePointer()
  fullName: System.Runtime.InteropServices.SafeBuffer.ReleasePointer()
  spec.csharp:
  - uid: System.Runtime.InteropServices.SafeBuffer.ReleasePointer
    name: ReleasePointer
    nameWithType: SafeBuffer.ReleasePointer
    fullName: System.Runtime.InteropServices.SafeBuffer.ReleasePointer
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.InteropServices.SafeBuffer.ReleasePointer
    name: ReleasePointer
    nameWithType: SafeBuffer.ReleasePointer
    fullName: System.Runtime.InteropServices.SafeBuffer.ReleasePointer
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Runtime.InteropServices.SafeBuffer.Read``1(System.UInt64)
  commentId: M:System.Runtime.InteropServices.SafeBuffer.Read``1(System.UInt64)
  parent: System.Runtime.InteropServices.SafeBuffer
  isExternal: true
  name: Read<T>(UInt64)
  nameWithType: SafeBuffer.Read<T>(UInt64)
  fullName: System.Runtime.InteropServices.SafeBuffer.Read<T>(System.UInt64)
  nameWithType.vb: SafeBuffer.Read(Of T)(UInt64)
  fullname.vb: System.Runtime.InteropServices.SafeBuffer.Read(Of T)(System.UInt64)
  name.vb: Read(Of T)(UInt64)
  spec.csharp:
  - uid: System.Runtime.InteropServices.SafeBuffer.Read``1(System.UInt64)
    name: Read<T>
    nameWithType: SafeBuffer.Read<T>
    fullName: System.Runtime.InteropServices.SafeBuffer.Read<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.InteropServices.SafeBuffer.Read``1(System.UInt64)
    name: Read(Of T)
    nameWithType: SafeBuffer.Read(Of T)
    fullName: System.Runtime.InteropServices.SafeBuffer.Read(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Runtime.InteropServices.SafeBuffer.ReadArray``1(System.UInt64,{T}[],System.Int32,System.Int32)
  commentId: M:System.Runtime.InteropServices.SafeBuffer.ReadArray``1(System.UInt64,``0[],System.Int32,System.Int32)
  parent: System.Runtime.InteropServices.SafeBuffer
  definition: System.Runtime.InteropServices.SafeBuffer.ReadArray``1(System.UInt64,``0[],System.Int32,System.Int32)
  name: ReadArray<T>(UInt64, T[], Int32, Int32)
  nameWithType: SafeBuffer.ReadArray<T>(UInt64, T[], Int32, Int32)
  fullName: System.Runtime.InteropServices.SafeBuffer.ReadArray<T>(System.UInt64, T[], System.Int32, System.Int32)
  nameWithType.vb: SafeBuffer.ReadArray(Of T)(UInt64, T(), Int32, Int32)
  fullname.vb: System.Runtime.InteropServices.SafeBuffer.ReadArray(Of T)(System.UInt64, T(), System.Int32, System.Int32)
  name.vb: ReadArray(Of T)(UInt64, T(), Int32, Int32)
  spec.csharp:
  - uid: System.Runtime.InteropServices.SafeBuffer.ReadArray``1(System.UInt64,``0[],System.Int32,System.Int32)
    name: ReadArray<T>
    nameWithType: SafeBuffer.ReadArray<T>
    fullName: System.Runtime.InteropServices.SafeBuffer.ReadArray<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.InteropServices.SafeBuffer.ReadArray``1(System.UInt64,``0[],System.Int32,System.Int32)
    name: ReadArray(Of T)
    nameWithType: SafeBuffer.ReadArray(Of T)
    fullName: System.Runtime.InteropServices.SafeBuffer.ReadArray(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Runtime.InteropServices.SafeBuffer.Write``1(System.UInt64,{T})
  commentId: M:System.Runtime.InteropServices.SafeBuffer.Write``1(System.UInt64,``0)
  parent: System.Runtime.InteropServices.SafeBuffer
  definition: System.Runtime.InteropServices.SafeBuffer.Write``1(System.UInt64,``0)
  name: Write<T>(UInt64, T)
  nameWithType: SafeBuffer.Write<T>(UInt64, T)
  fullName: System.Runtime.InteropServices.SafeBuffer.Write<T>(System.UInt64, T)
  nameWithType.vb: SafeBuffer.Write(Of T)(UInt64, T)
  fullname.vb: System.Runtime.InteropServices.SafeBuffer.Write(Of T)(System.UInt64, T)
  name.vb: Write(Of T)(UInt64, T)
  spec.csharp:
  - uid: System.Runtime.InteropServices.SafeBuffer.Write``1(System.UInt64,``0)
    name: Write<T>
    nameWithType: SafeBuffer.Write<T>
    fullName: System.Runtime.InteropServices.SafeBuffer.Write<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.InteropServices.SafeBuffer.Write``1(System.UInt64,``0)
    name: Write(Of T)
    nameWithType: SafeBuffer.Write(Of T)
    fullName: System.Runtime.InteropServices.SafeBuffer.Write(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Runtime.InteropServices.SafeBuffer.WriteArray``1(System.UInt64,{T}[],System.Int32,System.Int32)
  commentId: M:System.Runtime.InteropServices.SafeBuffer.WriteArray``1(System.UInt64,``0[],System.Int32,System.Int32)
  parent: System.Runtime.InteropServices.SafeBuffer
  definition: System.Runtime.InteropServices.SafeBuffer.WriteArray``1(System.UInt64,``0[],System.Int32,System.Int32)
  name: WriteArray<T>(UInt64, T[], Int32, Int32)
  nameWithType: SafeBuffer.WriteArray<T>(UInt64, T[], Int32, Int32)
  fullName: System.Runtime.InteropServices.SafeBuffer.WriteArray<T>(System.UInt64, T[], System.Int32, System.Int32)
  nameWithType.vb: SafeBuffer.WriteArray(Of T)(UInt64, T(), Int32, Int32)
  fullname.vb: System.Runtime.InteropServices.SafeBuffer.WriteArray(Of T)(System.UInt64, T(), System.Int32, System.Int32)
  name.vb: WriteArray(Of T)(UInt64, T(), Int32, Int32)
  spec.csharp:
  - uid: System.Runtime.InteropServices.SafeBuffer.WriteArray``1(System.UInt64,``0[],System.Int32,System.Int32)
    name: WriteArray<T>
    nameWithType: SafeBuffer.WriteArray<T>
    fullName: System.Runtime.InteropServices.SafeBuffer.WriteArray<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.InteropServices.SafeBuffer.WriteArray``1(System.UInt64,``0[],System.Int32,System.Int32)
    name: WriteArray(Of T)
    nameWithType: SafeBuffer.WriteArray(Of T)
    fullName: System.Runtime.InteropServices.SafeBuffer.WriteArray(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Runtime.InteropServices.SafeBuffer.ByteLength
  commentId: P:System.Runtime.InteropServices.SafeBuffer.ByteLength
  parent: System.Runtime.InteropServices.SafeBuffer
  isExternal: true
  name: ByteLength
  nameWithType: SafeBuffer.ByteLength
  fullName: System.Runtime.InteropServices.SafeBuffer.ByteLength
- uid: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid.IsInvalid
  commentId: P:Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid.IsInvalid
  parent: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid
  isExternal: true
  name: IsInvalid
  nameWithType: SafeHandleZeroOrMinusOneIsInvalid.IsInvalid
  fullName: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid.IsInvalid
- uid: System.Runtime.InteropServices.SafeHandle.handle
  commentId: F:System.Runtime.InteropServices.SafeHandle.handle
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: true
  name: handle
  nameWithType: SafeHandle.handle
  fullName: System.Runtime.InteropServices.SafeHandle.handle
- uid: System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)
  commentId: M:System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: true
  name: SetHandle(IntPtr)
  nameWithType: SafeHandle.SetHandle(IntPtr)
  fullName: System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)
  spec.csharp:
  - uid: System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)
    name: SetHandle
    nameWithType: SafeHandle.SetHandle
    fullName: System.Runtime.InteropServices.SafeHandle.SetHandle
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IntPtr
    name: IntPtr
    nameWithType: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)
    name: SetHandle
    nameWithType: SafeHandle.SetHandle
    fullName: System.Runtime.InteropServices.SafeHandle.SetHandle
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IntPtr
    name: IntPtr
    nameWithType: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Runtime.InteropServices.SafeHandle.DangerousGetHandle
  commentId: M:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: true
  name: DangerousGetHandle()
  nameWithType: SafeHandle.DangerousGetHandle()
  fullName: System.Runtime.InteropServices.SafeHandle.DangerousGetHandle()
  spec.csharp:
  - uid: System.Runtime.InteropServices.SafeHandle.DangerousGetHandle
    name: DangerousGetHandle
    nameWithType: SafeHandle.DangerousGetHandle
    fullName: System.Runtime.InteropServices.SafeHandle.DangerousGetHandle
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.InteropServices.SafeHandle.DangerousGetHandle
    name: DangerousGetHandle
    nameWithType: SafeHandle.DangerousGetHandle
    fullName: System.Runtime.InteropServices.SafeHandle.DangerousGetHandle
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Runtime.InteropServices.SafeHandle.Close
  commentId: M:System.Runtime.InteropServices.SafeHandle.Close
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: true
  name: Close()
  nameWithType: SafeHandle.Close()
  fullName: System.Runtime.InteropServices.SafeHandle.Close()
  spec.csharp:
  - uid: System.Runtime.InteropServices.SafeHandle.Close
    name: Close
    nameWithType: SafeHandle.Close
    fullName: System.Runtime.InteropServices.SafeHandle.Close
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.InteropServices.SafeHandle.Close
    name: Close
    nameWithType: SafeHandle.Close
    fullName: System.Runtime.InteropServices.SafeHandle.Close
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Runtime.InteropServices.SafeHandle.Dispose
  commentId: M:System.Runtime.InteropServices.SafeHandle.Dispose
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: true
  name: Dispose()
  nameWithType: SafeHandle.Dispose()
  fullName: System.Runtime.InteropServices.SafeHandle.Dispose()
  spec.csharp:
  - uid: System.Runtime.InteropServices.SafeHandle.Dispose
    name: Dispose
    nameWithType: SafeHandle.Dispose
    fullName: System.Runtime.InteropServices.SafeHandle.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.InteropServices.SafeHandle.Dispose
    name: Dispose
    nameWithType: SafeHandle.Dispose
    fullName: System.Runtime.InteropServices.SafeHandle.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)
  commentId: M:System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: true
  name: Dispose(Boolean)
  nameWithType: SafeHandle.Dispose(Boolean)
  fullName: System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)
  spec.csharp:
  - uid: System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)
    name: Dispose
    nameWithType: SafeHandle.Dispose
    fullName: System.Runtime.InteropServices.SafeHandle.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)
    name: Dispose
    nameWithType: SafeHandle.Dispose
    fullName: System.Runtime.InteropServices.SafeHandle.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid
  commentId: M:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: true
  name: SetHandleAsInvalid()
  nameWithType: SafeHandle.SetHandleAsInvalid()
  fullName: System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid()
  spec.csharp:
  - uid: System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid
    name: SetHandleAsInvalid
    nameWithType: SafeHandle.SetHandleAsInvalid
    fullName: System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid
    name: SetHandleAsInvalid
    nameWithType: SafeHandle.SetHandleAsInvalid
    fullName: System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)
  commentId: M:System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: true
  name: DangerousAddRef(Boolean)
  nameWithType: SafeHandle.DangerousAddRef(Boolean)
  fullName: System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean)
  spec.csharp:
  - uid: System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)
    name: DangerousAddRef
    nameWithType: SafeHandle.DangerousAddRef
    fullName: System.Runtime.InteropServices.SafeHandle.DangerousAddRef
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)
    name: DangerousAddRef
    nameWithType: SafeHandle.DangerousAddRef
    fullName: System.Runtime.InteropServices.SafeHandle.DangerousAddRef
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Runtime.InteropServices.SafeHandle.DangerousRelease
  commentId: M:System.Runtime.InteropServices.SafeHandle.DangerousRelease
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: true
  name: DangerousRelease()
  nameWithType: SafeHandle.DangerousRelease()
  fullName: System.Runtime.InteropServices.SafeHandle.DangerousRelease()
  spec.csharp:
  - uid: System.Runtime.InteropServices.SafeHandle.DangerousRelease
    name: DangerousRelease
    nameWithType: SafeHandle.DangerousRelease
    fullName: System.Runtime.InteropServices.SafeHandle.DangerousRelease
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.InteropServices.SafeHandle.DangerousRelease
    name: DangerousRelease
    nameWithType: SafeHandle.DangerousRelease
    fullName: System.Runtime.InteropServices.SafeHandle.DangerousRelease
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Runtime.InteropServices.SafeHandle.IsClosed
  commentId: P:System.Runtime.InteropServices.SafeHandle.IsClosed
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: true
  name: IsClosed
  nameWithType: SafeHandle.IsClosed
  fullName: System.Runtime.InteropServices.SafeHandle.IsClosed
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO
  commentId: N:System.IO
  isExternal: false
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Runtime.ConstrainedExecution
  commentId: N:System.Runtime.ConstrainedExecution
  isExternal: false
  name: System.Runtime.ConstrainedExecution
  nameWithType: System.Runtime.ConstrainedExecution
  fullName: System.Runtime.ConstrainedExecution
- uid: System.Runtime.InteropServices
  commentId: N:System.Runtime.InteropServices
  isExternal: false
  name: System.Runtime.InteropServices
  nameWithType: System.Runtime.InteropServices
  fullName: System.Runtime.InteropServices
- uid: Microsoft.Win32.SafeHandles
  commentId: N:Microsoft.Win32.SafeHandles
  isExternal: false
  name: Microsoft.Win32.SafeHandles
  nameWithType: Microsoft.Win32.SafeHandles
  fullName: Microsoft.Win32.SafeHandles
- uid: System.Runtime.InteropServices.SafeBuffer.ReadArray``1(System.UInt64,``0[],System.Int32,System.Int32)
  commentId: M:System.Runtime.InteropServices.SafeBuffer.ReadArray``1(System.UInt64,``0[],System.Int32,System.Int32)
  isExternal: true
  name: ReadArray<T>(UInt64, T[], Int32, Int32)
  nameWithType: SafeBuffer.ReadArray<T>(UInt64, T[], Int32, Int32)
  fullName: System.Runtime.InteropServices.SafeBuffer.ReadArray<T>(System.UInt64, T[], System.Int32, System.Int32)
  nameWithType.vb: SafeBuffer.ReadArray(Of T)(UInt64, T(), Int32, Int32)
  fullname.vb: System.Runtime.InteropServices.SafeBuffer.ReadArray(Of T)(System.UInt64, T(), System.Int32, System.Int32)
  name.vb: ReadArray(Of T)(UInt64, T(), Int32, Int32)
  spec.csharp:
  - uid: System.Runtime.InteropServices.SafeBuffer.ReadArray``1(System.UInt64,``0[],System.Int32,System.Int32)
    name: ReadArray<T>
    nameWithType: SafeBuffer.ReadArray<T>
    fullName: System.Runtime.InteropServices.SafeBuffer.ReadArray<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.InteropServices.SafeBuffer.ReadArray``1(System.UInt64,``0[],System.Int32,System.Int32)
    name: ReadArray(Of T)
    nameWithType: SafeBuffer.ReadArray(Of T)
    fullName: System.Runtime.InteropServices.SafeBuffer.ReadArray(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Runtime.InteropServices.SafeBuffer.Write``1(System.UInt64,``0)
  commentId: M:System.Runtime.InteropServices.SafeBuffer.Write``1(System.UInt64,``0)
  isExternal: true
  name: Write<T>(UInt64, T)
  nameWithType: SafeBuffer.Write<T>(UInt64, T)
  fullName: System.Runtime.InteropServices.SafeBuffer.Write<T>(System.UInt64, T)
  nameWithType.vb: SafeBuffer.Write(Of T)(UInt64, T)
  fullname.vb: System.Runtime.InteropServices.SafeBuffer.Write(Of T)(System.UInt64, T)
  name.vb: Write(Of T)(UInt64, T)
  spec.csharp:
  - uid: System.Runtime.InteropServices.SafeBuffer.Write``1(System.UInt64,``0)
    name: Write<T>
    nameWithType: SafeBuffer.Write<T>
    fullName: System.Runtime.InteropServices.SafeBuffer.Write<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.InteropServices.SafeBuffer.Write``1(System.UInt64,``0)
    name: Write(Of T)
    nameWithType: SafeBuffer.Write(Of T)
    fullName: System.Runtime.InteropServices.SafeBuffer.Write(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Runtime.InteropServices.SafeBuffer.WriteArray``1(System.UInt64,``0[],System.Int32,System.Int32)
  commentId: M:System.Runtime.InteropServices.SafeBuffer.WriteArray``1(System.UInt64,``0[],System.Int32,System.Int32)
  isExternal: true
  name: WriteArray<T>(UInt64, T[], Int32, Int32)
  nameWithType: SafeBuffer.WriteArray<T>(UInt64, T[], Int32, Int32)
  fullName: System.Runtime.InteropServices.SafeBuffer.WriteArray<T>(System.UInt64, T[], System.Int32, System.Int32)
  nameWithType.vb: SafeBuffer.WriteArray(Of T)(UInt64, T(), Int32, Int32)
  fullname.vb: System.Runtime.InteropServices.SafeBuffer.WriteArray(Of T)(System.UInt64, T(), System.Int32, System.Int32)
  name.vb: WriteArray(Of T)(UInt64, T(), Int32, Int32)
  spec.csharp:
  - uid: System.Runtime.InteropServices.SafeBuffer.WriteArray``1(System.UInt64,``0[],System.Int32,System.Int32)
    name: WriteArray<T>
    nameWithType: SafeBuffer.WriteArray<T>
    fullName: System.Runtime.InteropServices.SafeBuffer.WriteArray<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.InteropServices.SafeBuffer.WriteArray``1(System.UInt64,``0[],System.Int32,System.Int32)
    name: WriteArray(Of T)
    nameWithType: SafeBuffer.WriteArray(Of T)
    fullName: System.Runtime.InteropServices.SafeBuffer.WriteArray(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: LimeVideoSDKQuickSync.BigMemSafeBuffer.#ctor*
  commentId: Overload:LimeVideoSDKQuickSync.BigMemSafeBuffer.#ctor
  isExternal: false
  name: BigMemSafeBuffer
  nameWithType: BigMemSafeBuffer.BigMemSafeBuffer
  fullName: LimeVideoSDKQuickSync.BigMemSafeBuffer.BigMemSafeBuffer
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Runtime.InteropServices.SafeHandle.ReleaseHandle
  commentId: M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: true
  name: ReleaseHandle()
  nameWithType: SafeHandle.ReleaseHandle()
  fullName: System.Runtime.InteropServices.SafeHandle.ReleaseHandle()
  spec.csharp:
  - uid: System.Runtime.InteropServices.SafeHandle.ReleaseHandle
    name: ReleaseHandle
    nameWithType: SafeHandle.ReleaseHandle
    fullName: System.Runtime.InteropServices.SafeHandle.ReleaseHandle
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.InteropServices.SafeHandle.ReleaseHandle
    name: ReleaseHandle
    nameWithType: SafeHandle.ReleaseHandle
    fullName: System.Runtime.InteropServices.SafeHandle.ReleaseHandle
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: LimeVideoSDKQuickSync.BigMemSafeBuffer.ReleaseHandle*
  commentId: Overload:LimeVideoSDKQuickSync.BigMemSafeBuffer.ReleaseHandle
  isExternal: false
  name: ReleaseHandle
  nameWithType: BigMemSafeBuffer.ReleaseHandle
  fullName: LimeVideoSDKQuickSync.BigMemSafeBuffer.ReleaseHandle
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
